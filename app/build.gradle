import java.util.regex.Pattern

apply plugin: 'android'
apply plugin: 'android-test'


android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    defaultConfig {
        //minSdkVersion 7
        //targetSdkVersion 19
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }
    lintOptions {
        abortOnError true
        warningsAsErrors true
    }

    if(project.hasProperty("signing.properties") && new File(project.property("signing.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("signing.properties"))))

        signingConfigs {

            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlign true
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

        }
    }


}



dependencies {
    testCompile 'junit:junit:4.10'
    compile 'com.android.support:gridlayout-v7:19.0.1'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'org.roboguice:roboguice:2.0'
    compile 'org.apache.commons:commons-lang3:3.3.1@jar'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    testCompile 'com.squareup:fest-android:1.0.+'
    testCompile 'org.mockito:mockito-all:+'
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'org.mockito:mockito-all:+'
}

task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}

def getManifestProperty(manifestLocation, Pattern pattern) {

    def manifestFile = file(manifestLocation)
    if (!manifestFile.exists()) {
        return -1
    }
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def manifestProperty = matcher.group(1);

    return manifestProperty
}

android.applicationVariants.all { variant ->

    def apk = variant.outputFile
    def newManifest = variant.processManifest.manifestOutputFile

    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def versionCode = getManifestProperty(newManifest.path, pattern)

    pattern = Pattern.compile("versionName=\"([0-9].[0-9].[0-9])\"")
    def versionName = getManifestProperty(newManifest.path, pattern)

    if (versionCode == -1) {
        return
    }
    def newName
    if (variant.buildType.versionNameSuffix) {
        newName = "Toe-v${versionCode}-${versionName}-${variant.buildType.versionNameSuffix}.apk"
    }
    else {
        newName = "Toe-v${versionCode}-${versionName}.apk"
    }

    //noinspection GroovyAssignabilityCheck
    variant.outputFile = new File(apk.parentFile, newName)
}