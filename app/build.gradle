import java.util.regex.Pattern

apply plugin: 'android'
apply plugin: 'android-test'


android {
    compileSdkVersion 19
    buildToolsVersion '19.0.2'

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
        versionName "1.0.0"
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }

    if(project.hasProperty("MyProject.properties") && new File(project.property("MyProject.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("MyProject.properties"))))

        signingConfigs {

            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            signingConfig signingConfigs.release
        }
    }


}

dependencies {
    testCompile 'junit:junit:4.10'
    compile 'com.android.support:gridlayout-v7:19.0.1'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-v4:19.0.+'
    compile 'org.roboguice:roboguice:2.0'
    compile 'org.apache.commons:commons-lang3:3.3.1@jar'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    testCompile 'com.squareup:fest-android:1.0.+'
    testCompile 'org.mockito:mockito-all:+'
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'org.mockito:mockito-all:+'
}

task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
   /* generateReleaseBuildConfig.dependsOn(increaseVersionCode)*/
}



def getVersionCode(manifestLocation, increment = false) {
    def manifestFile = file(manifestLocation)
    if (!manifestFile.exists()) {
    /*    throw new Exception(manifestLocation + "  ---- NO MANIFEST FILE")*/
        return -1
    }
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    if (increment) {
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        manifestFile.write(manifestContent)
    }
    return versionCode
}

task('increaseVersionCode') << {
    getVersionCode("src/main/AndroidManifest.xml", true)
}

android.applicationVariants.all { variant ->

    def apk = variant.outputFile

    def newManifest = variant.processManifest.manifestOutputFile
    def versionCode = getVersionCode(newManifest.path)
    if (versionCode == -1) {
        return
    }
    def newName
    if (variant.buildType.versionNameSuffix) {
        newName = "Toe-v${versionCode}-${android.defaultConfig.versionName}-${variant.buildType.versionNameSuffix}.apk"
    } else {
        newName = "Toe-v${versionCode}-${android.defaultConfig.versionName}.apk"
    }

//noinspection GroovyAssignabilityCheck
    variant.outputFile = new File(apk.parentFile, newName)
}